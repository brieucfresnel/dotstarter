@use "./breakpoints" as *;

@mixin figure-ratio($width, $height) {
	position: relative;

	&:before {
		display: block;
		content: "";
		width: 100%;
		padding-top: calc(($height / $width) * 100%);
	}

	> img {
		@include cover-image;
	}
}

@mixin cover-image {
	position: absolute;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	object-fit: cover;
}

@mixin media-breakpoint-up($breakpoint) {
	// If the breakpoint exists in the map.
	@if map-has-key($breakpoints, $breakpoint) {
		// Get the breakpoint value.
		$breakpoint-value: map-get($breakpoints, $breakpoint);

		// Write the media query.
		@media (min-width: $breakpoint-value) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {
		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

// @include media-breakpoint-down(sm) {}
@mixin media-breakpoint-down($breakpoint) {
	// If the breakpoint exists in the map.
	@if map-has-key($breakpoints, $breakpoint) {
		// Get the breakpoint value.
		$breakpoint-value: map-get($breakpoints, $breakpoint);

		// Write the media query.
		@media (max-width: ($breakpoint-value - 1)) {
			@content;
		}

		// If the breakpoint doesn't exist in the map.
	} @else {
		// Log a warning.
		@warn 'Invalid breakpoint: #{$breakpoint}.';
	}
}

@mixin media-breakpoint-between($lower, $upper) {
	// If both the lower and upper breakpoints exist in the map.
	@if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper)
	{
		// Get the lower and upper breakpoints.
		$lower-breakpoint: map-get($breakpoints, $lower);
		$upper-breakpoint: map-get($breakpoints, $upper);

		// Write the media query.
		@media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
			@content;
		}

		// If one or both of the breakpoints don't exist.
	} @else {
		// If lower breakpoint is invalid.
		@if (map-has-key($breakpoints, $lower) == false) {
			// Log a warning.
			@warn 'Your lower breakpoint was invalid: #{$lower}.';
		}

		// If upper breakpoint is invalid.
		@if (map-has-key($breakpoints, $upper) == false) {
			// Log a warning.
			@warn 'Your upper breakpoint was invalid: #{$upper}.';
		}
	}
}

$default-min-bp: map-get($breakpoints, "lg");
$default-max-bp: map-get($breakpoints, "xxl");

@function round($number, $decimals: 0) {
	$n: 1;
	@if $decimals > 0 {
		@for $i from 1 through $decimals {
			$n: $n * 10;
		}
	}
	@return math.div(math.round($number * $n), $n);
}

@function px-to-rem($px) {
	$rems: math.div($px, 16px) * 1rem;
	@return $rems;
}

/**
  * Will output a fluid font-size value
  *
  * Example : font-size: #{fluid(16px, 31px, 320px, 960px)}
  */
@function fluid(
	$min-size,
	$max-size,
	$min-breakpoint: $default-min-bp,
	$max-breakpoint: $default-max-bp,
	$unit: vw
) {
	$slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
	$slope-to-unit: round($slope * 100, 2);
	$intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 2);
	$min-size-rem: round(px-to-rem($min-size), 2);
	$max-size-rem: round(px-to-rem($max-size), 2);
	@return clamp(
		#{$min-size-rem},
		#{$slope-to-unit}#{$unit} + #{$intercept-rem},
		#{$max-size-rem}
	);
}
